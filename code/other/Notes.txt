# JS Data Types
(1) Primitive Types 
=> the actual value is stored
1- Number
2- String
3- Boolean
4- Undefined
5- Null
6- Symbol
7- BinInt

(2) Reference Types 
=> a reference is stored to where that type is in the memory
1- Arrays
2-Objects => key-value pair => properties
3-Functions

# Variable Declarations
1- var
2- let
3- const
// Make sense, understandable, camelCase
const firstName = Tom
box => variable => let, const, var
box label = variable name => firstName
box content => variable stored info => Tom

# String Methods
new String() => // let city = new String("london");
String Literal => // let movie = "memento";
toUpperCase() => var.toUpperCase()
toLowerCase() => var.toLowerCase()
concatanation => var1 + " " + var2
Length() => var.length
string template literal => `random text ${var} extra text`

# Finding the Index
console.log(pet[4]);
console.log(pet[pet.length - 1]);
trim => var.trim()
indexOf => var.indexOf("_")
charAt => var.charAt(n)
slice => var.slice(n)
split => var.splice("_")
includes => var.includes("_")
replace => var.replace("___","___")

# Operators
1) Comparison Operators
> , <  -- Greater Than, Less Than
>= , <=  -- Greater Than or Equal to, Less Than or Equal to
console.log(2 > 1, 2 < 1, 15 >= 15, 15 >= 16, 15 <= 15, 15 <= 16);
2) Equality Operator ==
console.log(1 == 1, 1 == "1", "z" == "z", true == true, false == true, 0 == "");
console.log(undefined == null, false == 0, true == 1);
3) Strict Equality Operator ===
console.log(1 === 1, 1 === "1", "z" === "z", true === true, false === true, 0 === "");
console.log(undefined === null, false === 0, true === 1);
4) Non-equality Operator !=
console.log(1 != 1, 1 != "1", "z" != "z", "z" != "x", true != true, false != true);
console.log(0 != "", undefined != null, false != 0, true != 1);
5) strict Non-equality operator !==
console.log(1 !== 1, 1 !== "1", "z" !== "z", "z" !== "x", true !== true, false !== true);
console.log(0 !== "", undefined !== null, false !== 0, true !== 1);

# If - Else Statement 
1) if statement => checking for a single condition
if ( conditions ){ if true run code }
2) else if statement => checking for more than two conditions
else if ( conditions ){ if true this run code }
3) else statement => checking for two conditions
else { default code }

# Switch 
switch statement => checking for a single condition
default statement => checking for two conditions
switch (var) {
case value1: code; break;
case value2: code; break;
default: default code; }

# The Ternary Operator 
=> checking for two conditions
condition ? if true run code 1 : if false run code 2;
var === 10 ? console.log("true") : console.log("false");

# Logical Operators 
and operator (&&)
or operator (||)
not operator (!)

# Arrays
Array Literal => Array => Collection of Data
Collections of songs, posts, comments, numbers, levels of games ...
let var = ["yellow", 45, null, undefined, NaN, true];
var[n] => Accessing a specific value of an index
var[n] = "_" => Changing the Array values
var[var.length] = "_" => Adding to the end of an array 

# Array Methods: shift, unshift, pop, push, slice, splice, includes
1) var.shift(); => removes from the start
2) var.unshift(); => adds to the start
3) var.pop(); => removes from the end
4) var.push(); => adds to the end
5) var.slice(si,ei); => starting index, ending index
6) var.splice(si,n); => starting index, number of items to be removed
7) var.includes("_") => check for existance of value
8) ar1.concat(ar2) => concat two arrays
9) var.reverse() => reverse array
10) var.join("_") => join with(" ",",","|") or without seperator

# Object 
object literal => Object => store key-value pairs
const obj = {
key1 : "value1",
"key2" : "value2",
};
var.key1 => Accessing the object data
var(["key1"]) => Array brackets
var["key2"] = "value3" ; => Modifying Objects - change the object data
var["newkey"] = "newkeyvalue" ; => Updating Objects - create more key-value pairs
var.newkey = "newkeyvalue" ;

# Nesting
1)array of arrays
2)Objects within Objects
3)Arrays within Objects
4)Objects within Arrays
let aoa = [ [0,1,2], ["a","A"], [true, undefined, null] ]
let owo = { obj1: {i1: "v1", i2: "v2", i3: "v3",}, key_x: "value" }
let awo = { obj1: [1,0,true,null,"n"], key_x: "value" }
let owa = [ {i1: "v1", i2: "v2", i3: "v3",}, "value" ]
console.log(aoa[2][1]); => undefined
console.log(owo.obj1, owo["obj1"], owo["obj1"].i1, owo["obj1"]["i2"]);
console.log(awo.obj1, awo["obj1"], awo["obj1"][n]);
console.log(owa[0], owa[0]["i2"], owa[0].i1);

# For Loop
1) a variable is defined (a starting point)
2) the ending point is defined
3) how much the variable is incremented
for(initialExpression; condition; incrementExpresssion){the code that we want to run}

# While Loop
declare a variable 
while(condition) {run the code; variable++}

# Function Declarations (Function Statement)
in the function name => parameters
in the function call => arguments
function myFunc(parameters) { console.log("I am a Function"); }
myFunc(arguments);
=> The return keyword: 
function sum(a, b) {return a + b;}
console.log(sum(10, 12));

# Scope
=> Variable Function Scope
Variable Declaration => let, const vs var
function myFunc() { let name1 = "name1"; const name2 = "name2"; var name3 = "name3";
  console.log(name1+name2+name3); } console.log(name1);console.log(name2);console.log(name3);
=> Variable Block Scope {}

# For of Loop , For in Loop
*****

# Higher Order Functions
(1) Functions accepting other functions as arguments
function repeat(x) { x() ; x() ; }
(2) Functions accepting other functions as returned values => factory function
function sum(x) { return function (y) {return x + y;}; }

# Callback functions
setTimeout(function () {console.log(2 + 2);}, 1000);

# DOM
=> Document Object Model => link the JS object to the HTML Doc

## Selecting Methods 
1) Getting HTML Elements by Their Class
const var = document.getElementsByClassName("classname"); console.log(var);
2) Getting HTML Elements by Their ID
let var = document.getElementById("id"); console.log(var);
3) querySelectorAll => It selects all elements that share that selector
let var = document.querySelectorAll(".item"); console.log(var);
4) querySelector => It selects only one element that has the selector
let var = document.querySelector("#dog-img"); console.log(dvar;

## Properties
1) => innerText
const var = document.querySelector("p"); console.log(var.innerText);
2) => textContent
const var = document.querySelector("p"); console.log(var.textContent);
3) => innerHTML
const var = document.querySelector("ul"); console.log(var.innerHTML);

## 
Method #1 => getAttribute()
const var = document.querySelector("p"); console.log(var.getAttribute("id"));
Method #2 => setAttribute()
const var = document.querySelector("p");
var.setAttribute("class", "paragraph"); console.log(var.getAttribute("class"));

## 
Property #4 => Traversing the DOM Properties
1- parentElement
2- children
3- previousElementSibling
4- nextElementSibling
const para = document.querySelector("p"); console.log(para.parentElement);
const body1 = document.body;
console.log(body1.children);console.log(body1.children[0]);
console.log(body1.children[3]);
const item = document.querySelector("ul li:nth-child(2)");
console.log(item); console.log(item.previousElementSibling); console.log(item.nextElementSibling);

****Property #5 => style